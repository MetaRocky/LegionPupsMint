{"version":3,"sources":["connection.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","candy-machine.ts"],"names":["SequenceType","sendTransactions","connection","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","txid","ind","failCallback","block","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","length","transaction","Transaction","forEach","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","push","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","console","log","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","catch","reason","StopOnFailure","Promise","all","number","txs","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","timeout","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","done","sleep","awaitTransactionSignatureConfirmation","confirmation","Error","err","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","isEnded","isActive","isSoldOut","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","state","onClick","gatekeeper","variant","CircularProgress","goLiveDate","cluster","process","decimals","REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS","splTokenName","REACT_APP_SPL_TOKEN_TO_MINT_NAME","WalletContainer","div","WalletAmount","Wallet","ul","ConnectButton","WalletMultiButton","NFT","Paper","Des","Card","MintButtonContainer","Logo","Menu","SolExplorerLink","a","MainContainer","MintContainer","DesContainer","Price","Chip","Image","img","BorderLinearProgress","LinearProgress","ShimmerTitle","h1","GoldTitle","h2","LogoAligner","Home","props","balance","setBalance","setIsMinting","setIsActive","solanaExplorerLink","setSolanaExplorerLink","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","price","setPrice","priceLabel","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","isBurnToken","setIsBurnToken","whitelistTokenBalance","setWhitelistTokenBalance","setIsEnded","endDate","setEndDate","isPresale","setIsPresale","isWLOnly","setIsWLOnly","open","severity","undefined","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","displaySuccess","mintPublicKey","remaining","confetti","particleCount","spread","origin","y","program","mint","anchor","Keypair","generate","mintOneToken","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","getCandyMachineState","candyMachineId","cndy","divider","Array","join","tokenMint","toNumber","whitelistMintSettings","mode","burnEveryTime","presale","discountPrice","getAtaForMint","getTokenAccountBalance","tokenBalance","uiAmount","endSettings","endSettingType","date","toDate","amount","limit","Math","min","href","target","rel","alt","src","toLocaleString","elevation","label","now","onMount","completed","onComplete","renderer","days","hours","minutes","signTransaction","PublicKey","CANDY_MACHINE_PROGRAM","gatekeeperNetwork","clusterUrl","options","autoShowModal","seconds","Snackbar","autoHideDuration","onClose","Alert","require","network","Connection","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","anchorWallet","provider","preflightCommitment","fetchIdl","idl","account","fetch","id","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","expireOnUse","whitelistToken","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","t"],"mappings":"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","file":"static/js/main.b06832e3.chunk.js","sourcesContent":["import {\n    Keypair,\n    Commitment,\n    Connection,\n    RpcResponseAndContext,\n    SignatureStatus,\n    SimulatedTransactionResponse,\n    Transaction,\n    TransactionInstruction,\n    TransactionSignature,\n    Blockhash,\n    FeeCalculator,\n  } from '@solana/web3.js';\n  \n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n  \n  interface BlockhashAndFeeCalculator {\n    blockhash: Blockhash;\n    feeCalculator: FeeCalculator;\n  }\n  \n  export const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n  ) => {\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n  \n    const tx = await connection.getParsedConfirmedTransaction(txid);\n  \n    const errors: string[] = [];\n    if (tx?.meta && tx.meta.logMessages) {\n      tx.meta.logMessages.forEach(log => {\n        const regex = /Error: (.*)/gm;\n        let m;\n        while ((m = regex.exec(log)) !== null) {\n          // This is necessary to avoid infinite loops with zero-width matches\n          if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n          }\n  \n          if (m.length > 1) {\n            errors.push(m[1]);\n          }\n        }\n      });\n    }\n  \n    return errors;\n  };\n  \n  export enum SequenceType {\n    Sequential,\n    Parallel,\n    StopOnFailure,\n  }\n  \n  export async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n  ): Promise<(string | undefined)[]> {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners: Record<number, boolean> = {};\n    instructions = instructions.filter((instr, i) => {\n      if (instr.length > 0) {\n        return true;\n      } else {\n        toRemoveSigners[i] = true;\n        return false;\n      }\n    });\n    let ids: string[] = [];\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n  \n    while (stopPoint < instructions.length && tries < 3) {\n      instructions = instructions.slice(stopPoint, instructions.length);\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n  \n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\n      else tries = 0;\n  \n      try {\n        if (instructions.length === 1) {\n          const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n          );\n          ids.push(id.txid);\n          stopPoint = 1;\n        } else {\n          const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n          );\n          ids = ids.concat(txs.map(t => t.txid));\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n      );\n      lastInstructionsLength = instructions.length;\n    }\n  \n    return ids;\n  }\n  \n  export const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    const unsignedTxns: Transaction[] = [];\n  \n    if (!block) {\n      block = await connection.getRecentBlockhash(commitment);\n    }\n  \n    for (let i = 0; i < instructionSet.length; i++) {\n      const instructions = instructionSet[i];\n      const signers = signersSet[i];\n  \n      if (instructions.length === 0) {\n        continue;\n      }\n  \n      let transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      transaction.recentBlockhash = block.blockhash;\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n  \n      if (signers.length > 0) {\n        transaction.partialSign(...signers);\n      }\n  \n      unsignedTxns.push(transaction);\n    }\n  \n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\n  \n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n  \n    let breakEarlyObject = { breakEarly: false, i: 0 };\n    console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n    );\n    for (let i = 0; i < signedTxns.length; i++) {\n      const signedTxnPromise = sendSignedTransaction({\n        connection,\n        signedTransaction: signedTxns[i],\n      });\n  \n      signedTxnPromise\n        .then(({ txid, slot }) => {\n          successCallback(txid, i);\n        })\n        .catch(reason => {\n          // @ts-ignore\n          failCallback(signedTxns[i], i);\n          if (sequenceType === SequenceType.StopOnFailure) {\n            breakEarlyObject.breakEarly = true;\n            breakEarlyObject.i = i;\n          }\n        });\n  \n      if (sequenceType !== SequenceType.Parallel) {\n        try {\n          await signedTxnPromise;\n        } catch (e) {\n          console.log('Caught failure', e);\n          if (breakEarlyObject.breakEarly) {\n            console.log('Died on ', breakEarlyObject.i);\n            // Return the txn we failed on by index\n            return {\n              number: breakEarlyObject.i,\n              txs: await Promise.all(pendingTxns),\n            };\n          }\n        }\n      } else {\n        pendingTxns.push(signedTxnPromise);\n      }\n    }\n  \n    if (sequenceType !== SequenceType.Parallel) {\n      await Promise.all(pendingTxns);\n    }\n  \n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n  };\n  \n  export const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    const rawTransaction = transaction.serialize();\n    let options = {\n      skipPreflight: true,\n      commitment,\n    };\n  \n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n  \n    if (awaitConfirmation) {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n      slot = confirmation?.slot || 0;\n  \n      if (confirmation?.err) {\n        const errors = await getErrorForTransaction(connection, txid);\n  \n        console.log(errors);\n        throw new Error(`Raw transaction ${txid} failed`);\n      }\n    }\n  \n    return { txid, slot };\n  };\n  \n  export const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    if (beforeSend) {\n      beforeSend();\n    }\n  \n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n  \n    return { txid, slot };\n  };\n  \n  export const getUnixTs = () => {\n    return new Date().getTime() / 1000;\n  };\n  \n  const DEFAULT_TIMEOUT = 30000;\n  \n  export async function sendSignedTransaction({\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT,\n  }: {\n    signedTransaction: Transaction;\n    connection: Connection;\n    sendingMessage?: string;\n    sentMessage?: string;\n    successMessage?: string;\n    timeout?: number;\n  }): Promise<{ txid: string; slot: number }> {\n    const rawTransaction = signedTransaction.serialize();\n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n    );\n  \n    console.log('Started awaiting confirmation for', txid);\n  \n    let done = false;\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection.sendRawTransaction(rawTransaction, {\n          skipPreflight: true,\n        });\n        await sleep(500);\n      }\n    })();\n    try {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n  \n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n  \n      slot = confirmation?.slot || 0;\n    } catch (err: any) {\n      console.error('Timeout Error caught', err);\n      if (err.timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (e) { }\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      // throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n  \n    console.log('Latency', txid, getUnixTs() - startTime);\n    return { txid, slot };\n  }\n  \n  async function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n    );\n  \n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n  \n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  \n  async function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n  ): Promise<SignatureStatus | null | void> {\n    let done = false;\n    let status: SignatureStatus | null | void = {\n      slot: 0,\n      confirmations: 0,\n      err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Rejecting for timeout...');\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n        );\n      } catch (e) {\n        done = true;\n        console.error('WS error in setup', txid, e);\n      }\n      while (!done && queryStatus) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            status = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!status) {\n                console.log('REST null result for', txid, status);\n              } else if (status.err) {\n                console.log('REST error for', txid, status);\n                done = true;\n                reject(status.err);\n              } else if (!status.confirmations) {\n                console.log('REST no confirmations for', txid, status);\n              } else {\n                console.log('REST confirmation for', txid, status);\n                done = true;\n                resolve(status);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(2000);\n      }\n    });\n  \n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId])\n      connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n  }\n  export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  ","import styled from 'styled-components';\nimport {useEffect, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport {CircularProgress} from '@material-ui/core';\nimport {GatewayStatus, useGateway} from '@civic/solana-gateway-react';\nimport {CandyMachine} from './candy-machine';\n\n\nexport const CTAButton = styled(Button)`\n  display: block !important;\n  margin: 0 auto !important;\n  background-color: var(--title-text-color) !important;\n  min-width: 120px !important;\n  font-size: 1em !important;\n`;\n\nexport const MintButton = ({\n                               onMint,\n                               candyMachine,\n                               isMinting,\n                               isEnded,\n                               isActive,\n                               isSoldOut\n                           }: {\n    onMint: () => Promise<void>;\n    candyMachine: CandyMachine | undefined;\n    isMinting: boolean;\n    isEnded: boolean;\n    isActive: boolean;\n    isSoldOut: boolean;\n}) => {\n    const {requestGatewayToken, gatewayStatus} = useGateway();\n    const [clicked, setClicked] = useState(false);\n    const [isVerifying, setIsVerifying] = useState(false);\n\n    useEffect(() => {\n        setIsVerifying(false);\n        if (gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION && clicked) {\n            // when user approves wallet verification txn\n            setIsVerifying(true);\n        } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\n            console.log('Verified human, now minting...');\n            onMint();\n            setClicked(false);\n        }\n    }, [gatewayStatus, clicked, setClicked, onMint]);\n\n    return (\n        <CTAButton\n            disabled={\n                clicked ||\n                candyMachine?.state.isSoldOut ||\n                isSoldOut ||\n                isMinting ||\n                isEnded ||\n                !isActive ||\n                isVerifying\n            }\n            onClick={async () => {\n                if (isActive && candyMachine?.state.gatekeeper && gatewayStatus !== GatewayStatus.ACTIVE) {\n                    console.log('Requesting gateway token');\n                    setClicked(true);\n                    await requestGatewayToken();\n                } else {\n                    console.log('Minting...');\n                    await onMint();\n                }\n            }}\n            variant=\"contained\"\n        >\n            {!candyMachine ? (\n                \"CONNECTING...\"\n            ) : candyMachine?.state.isSoldOut || isSoldOut ? (\n                'SOLD OUT'\n            ) : isActive ? (\n                isVerifying ? 'VERIFYING...' :\n                    isMinting || clicked ? (\n                        <CircularProgress/>\n                    ) : (\n                        \"MINT\"\n                    )\n            ) : isEnded ? \"ENDED\" : (candyMachine?.state.goLiveDate ? (\n                \"SOON\"\n            ) : (\n                \"UNAVAILABLE\"\n            ))}\n        </CTAButton>\n    );\n};\n","import {useEffect, useState} from \"react\";\nimport styled from \"styled-components\";\nimport confetti from \"canvas-confetti\";\nimport * as anchor from \"@project-serum/anchor\";\nimport {LAMPORTS_PER_SOL, PublicKey} from \"@solana/web3.js\";\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\nimport {WalletMultiButton} from \"@solana/wallet-adapter-react-ui\";\nimport {GatewayProvider} from '@civic/solana-gateway-react';\nimport Countdown from \"react-countdown\";\nimport {Snackbar, Paper, LinearProgress, Chip} from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport {toDate, AlertState, getAtaForMint} from './utils';\nimport {MintButton} from './MintButton';\n\nimport {\n    CandyMachine,\n    awaitTransactionSignatureConfirmation,\n    getCandyMachineState,\n    mintOneToken,\n    CANDY_MACHINE_PROGRAM,\n} from \"./candy-machine\";\n\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\nconst decimals = process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS ? +process.env.REACT_APP_SPL_TOKEN_TO_MINT_DECIMALS!.toString() : 9;\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME ? process.env.REACT_APP_SPL_TOKEN_TO_MINT_NAME.toString() : \"TOKEN\";\n\nconst WalletContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst WalletAmount = styled.div`\n  color: black;\n  width: auto;\n  padding: 5px 5px 5px 16px;\n  min-width: 48px;\n  min-height: auto;\n  border-radius: 22px;\n  background-color: var(--main-text-color);\n  box-shadow: 0px 3px 5px -1px rgb(0 0 0 / 20%), 0px 6px 10px 0px rgb(0 0 0 / 14%), 0px 1px 18px 0px rgb(0 0 0 / 12%);\n  box-sizing: border-box;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  font-weight: 500;\n  line-height: 1.75;\n  text-transform: uppercase;\n  border: 0;\n  margin: 0;\n  display: inline-flex;\n  outline: 0;\n  position: relative;\n  align-items: center;\n  user-select: none;\n  vertical-align: middle;\n  justify-content: flex-start;\n  gap: 10px;\n`;\n\nconst Wallet = styled.ul`\n  flex: 0 0 auto;\n  margin: 0;\n  padding: 0;\n`;\n\nconst ConnectButton = styled(WalletMultiButton)`\n  border-radius: 18px !important;\n  padding: 6px 16px;\n  background-color: #4E44CE;\n  margin: 0 auto;\n`;\n\nconst NFT = styled(Paper)`\n  min-width: 500px;\n  padding: 5px 20px 20px 20px;\n  flex: 1 1 auto;\n  background-color: var(--card-background-color) !important;\n  box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22) !important;\n`;\n\nconst Des = styled(NFT)`\n  text-align: left;\n  padding-top: 0px;\n`;\n\n\nconst Card = styled(Paper)`\n  display: inline-block;\n  background-color: var(card-background-lighter-color) !important;\n  margin: 5px;\n  min-width: 40px;\n  padding: 24px;\n  h1{\n    margin:0px;\n  }\n`;\n\nconst MintButtonContainer = styled.div`\n  button.MuiButton-contained:not(.MuiButton-containedPrimary).Mui-disabled {\n    color: #464646;\n  }\n\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):hover,\n  button.MuiButton-contained:not(.MuiButton-containedPrimary):focus {\n    -webkit-animation: pulse 1s;\n    animation: pulse 1s;\n    box-shadow: 0 0 0 2em rgba(255, 255, 255, 0);\n  }\n\n  @-webkit-keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n\n  @keyframes pulse {\n    0% {\n      box-shadow: 0 0 0 0 #ef8f6e;\n    }\n  }\n`;\n\nconst Logo = styled.div`\n  flex: 0 0 auto;\n\n  img {\n    height: 60px;\n    border-radius: 50%;\n  }\n`;\nconst Menu = styled.ul`\n  list-style: none;\n  display: inline-flex;\n  flex: 1 0 auto;\n  color: #fff;\n\n  li {\n    margin: 0 12px;\n\n    a {\n      color: var(--main-text-color);\n      list-style-image: none;\n      list-style-position: outside;\n      list-style-type: none;\n      outline: none;\n      text-decoration: none;\n      text-size-adjust: 100%;\n      touch-action: manipulation;\n      transition: color 0.3s;\n      padding-bottom: 15px;\n\n      img {\n        max-height: 26px;\n        border-radius: 50%;\n      }\n    }\n\n    a:hover, a:active {\n      color: rgb(131, 146, 161);\n      border-bottom: 4px solid var(--title-text-color);\n    }\n\n  }\n`;\n\nconst SolExplorerLink = styled.a`\n  color: var(--title-text-color);\n  border-bottom: 1px solid var(--title-text-color);\n  font-weight: bold;\n  list-style-image: none;\n  list-style-position: outside;\n  list-style-type: none;\n  outline: none;\n  text-decoration: none;\n  text-size-adjust: 100%;\n\n  :hover {\n    border-bottom: 2px solid var(--title-text-color);\n  }\n`;\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  margin-right: 4%;\n  margin-left: 4%;\n  text-align: center;\n  justify-content: center;\n`;\n\nconst MintContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nconst DesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1 1 auto;\n  gap: 20px;\n`;\n\nconst Price = styled(Chip)`\n  position: absolute;\n  margin: 5px;\n  font-weight: bold;\n  font-size: 1.2em !important;\n  font-family: 'Patrick Hand', cursive !important;\n`;\n\nconst Image = styled.img`\n  height: 400px;\n  width: auto;\n  border-radius: 7px;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n`;\n\nconst BorderLinearProgress = styled(LinearProgress)`\n  margin: 20px;\n  height: 10px !important;\n  border-radius: 30px;\n  border: 2px solid white;\n  box-shadow: 5px 5px 40px 5px rgba(0,0,0,0.5);\n  background-color:var(--main-text-color) !important;\n  \n  > div.MuiLinearProgress-barColorPrimary{\n    background-color:var(--title-text-color) !important;\n  }\n\n  > div.MuiLinearProgress-bar1Determinate {\n    border-radius: 30px !important;\n    background-image: linear-gradient(270deg, rgba(255, 255, 255, 0.01), rgba(255, 255, 255, 0.5));\n  }\n`;\n\nconst ShimmerTitle = styled.h1`\n  margin: 20px auto;\n  text-transform: uppercase;\n  animation: glow 2s ease-in-out infinite alternate;\n  color: var(--main-text-color);\n  @keyframes glow {\n    from {\n      text-shadow: 0 0 20px var(--main-text-color);\n    }\n    to {\n      text-shadow: 0 0 30px var(--title-text-color), 0 0 10px var(--title-text-color);\n    }\n  }\n`;\n\nconst GoldTitle = styled.h2`\n  color: var(--title-text-color);\n`;\n\nconst LogoAligner = styled.div`\n  display: flex;\n  align-items: center;\n\n  img {\n    max-height: 35px;\n    margin-right: 10px;\n  }\n`;\n\n\nexport interface HomeProps {\n    candyMachineId: anchor.web3.PublicKey;\n    connection: anchor.web3.Connection;\n    txTimeout: number;\n    rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n    const [balance, setBalance] = useState<number>();\n    const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n    const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\n    const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\n    const [itemsAvailable, setItemsAvailable] = useState(0);\n    const [itemsRedeemed, setItemsRedeemed] = useState(0);\n    const [itemsRemaining, setItemsRemaining] = useState(0);\n    const [isSoldOut, setIsSoldOut] = useState(false);\n    const [payWithSplToken, setPayWithSplToken] = useState(false);\n    const [price, setPrice] = useState(0);\n    const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\n    const [whitelistPrice, setWhitelistPrice] = useState(0);\n    const [whitelistEnabled, setWhitelistEnabled] = useState(false);\n    const [isBurnToken, setIsBurnToken] = useState(false);\n    const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\n    const [isEnded, setIsEnded] = useState(false);\n    const [endDate, setEndDate] = useState<Date>();\n    const [isPresale, setIsPresale] = useState(false);\n    const [isWLOnly, setIsWLOnly] = useState(false);\n\n    const [alertState, setAlertState] = useState<AlertState>({\n        open: false,\n        message: \"\",\n        severity: undefined,\n    });\n\n    const wallet = useAnchorWallet();\n    const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n    const rpcUrl = props.rpcHost;\n\n    const refreshCandyMachineState = () => {\n        (async () => {\n            if (!wallet) return;\n\n            const cndy = await getCandyMachineState(\n                wallet as anchor.Wallet,\n                props.candyMachineId,\n                props.connection\n            );\n\n            setCandyMachine(cndy);\n            setItemsAvailable(cndy.state.itemsAvailable);\n            setItemsRemaining(cndy.state.itemsRemaining);\n            setItemsRedeemed(cndy.state.itemsRedeemed);\n\n            var divider = 1;\n            if (decimals) {\n                divider = +('1' + new Array(decimals).join('0').slice() + '0');\n            }\n\n            // detect if using spl-token to mint\n            if (cndy.state.tokenMint) {\n                setPayWithSplToken(true);\n                // Customize your SPL-TOKEN Label HERE\n                // TODO: get spl-token metadata name\n                setPriceLabel(splTokenName);\n                setPrice(cndy.state.price.toNumber() / divider);\n                setWhitelistPrice(cndy.state.price.toNumber() / divider);\n            }else {\n                setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n                setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\n            }\n\n\n            // fetch whitelist token balance\n            if (cndy.state.whitelistMintSettings) {\n                setWhitelistEnabled(true);\n                setIsBurnToken(cndy.state.whitelistMintSettings.mode.burnEveryTime);\n                setIsPresale(cndy.state.whitelistMintSettings.presale);\n                setIsWLOnly(!isPresale && cndy.state.whitelistMintSettings.discountPrice === null);\n\n                if (cndy.state.whitelistMintSettings.discountPrice !== null && cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price) {\n                    if (cndy.state.tokenMint) {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / divider);\n                    } else {\n                        setWhitelistPrice(cndy.state.whitelistMintSettings.discountPrice?.toNumber() / LAMPORTS_PER_SOL);\n                    }\n                }\n\n                let balance = 0;\n                try {\n                    const tokenBalance =\n                        await props.connection.getTokenAccountBalance(\n                            (\n                                await getAtaForMint(\n                                    cndy.state.whitelistMintSettings.mint,\n                                    wallet.publicKey,\n                                )\n                            )[0],\n                        );\n\n                    balance = tokenBalance?.value?.uiAmount || 0;\n                } catch (e) {\n                    console.error(e);\n                    balance = 0;\n                }\n                setWhitelistTokenBalance(balance);\n                setIsActive(isPresale && !isEnded && balance > 0);\n            } else {\n                setWhitelistEnabled(false);\n            }\n\n            // end the mint when date is reached\n            if (cndy?.state.endSettings?.endSettingType.date) {\n                setEndDate(toDate(cndy.state.endSettings.number));\n                if (\n                    cndy.state.endSettings.number.toNumber() <\n                    new Date().getTime() / 1000\n                ) {\n                    setIsEnded(true);\n                    setIsActive(false);\n                }\n            }\n            // end the mint when amount is reached\n            if (cndy?.state.endSettings?.endSettingType.amount) {\n                let limit = Math.min(\n                    cndy.state.endSettings.number.toNumber(),\n                    cndy.state.itemsAvailable,\n                );\n                setItemsAvailable(limit);\n                if (cndy.state.itemsRedeemed < limit) {\n                    setItemsRemaining(limit - cndy.state.itemsRedeemed);\n                } else {\n                    setItemsRemaining(0);\n                    cndy.state.isSoldOut = true;\n                    setIsEnded(true);\n                }\n            } else {\n                setItemsRemaining(cndy.state.itemsRemaining);\n            }\n\n            if (cndy.state.isSoldOut) {\n                setIsActive(false);\n            }\n        })();\n    };\n\n    const renderGoLiveDateCounter = ({days, hours, minutes, seconds}: any) => {\n        return (\n            <div><Card elevation={1}><h1>{days}</h1>Days</Card><Card elevation={1}><h1>{hours}</h1>\n                Hours</Card><Card elevation={1}><h1>{minutes}</h1>Mins</Card><Card elevation={1}>\n                <h1>{seconds}</h1>Secs</Card></div>\n        );\n    };\n\n    const renderEndDateCounter = ({days, hours, minutes}: any) => {\n        let label = \"\";\n        if (days > 0) {\n            label += days + \" days \"\n        }\n        if (hours > 0) {\n            label += hours + \" hours \"\n        }\n        label += (minutes+1) + \" minutes left to MINT.\"\n        return (\n            <div><h3>{label}</h3></div>\n        );\n    };\n\n    function displaySuccess(mintPublicKey: any): void {\n        let remaining = itemsRemaining - 1;\n        setItemsRemaining(remaining);\n        setIsSoldOut(remaining === 0);\n        if (isBurnToken && whitelistTokenBalance && whitelistTokenBalance > 0) {\n            let balance = whitelistTokenBalance - 1;\n            setWhitelistTokenBalance(balance);\n            setIsActive(isPresale && !isEnded && balance > 0);\n        }\n        setItemsRedeemed(itemsRedeemed + 1);\n        const solFeesEstimation = 0.012; // approx\n        if (!payWithSplToken && balance && balance > 0) {\n            setBalance(balance - (whitelistEnabled ? whitelistPrice : price) - solFeesEstimation);\n        }\n        setSolanaExplorerLink(cluster === \"devnet\" || cluster === \"testnet\"\n            ? (\"https://solscan.io/token/\" + mintPublicKey + \"?cluster=\" + cluster)\n            : (\"https://solscan.io/token/\" + mintPublicKey));\n        throwConfetti();\n    };\n\n    function throwConfetti(): void {\n        confetti({\n            particleCount: 400,\n            spread: 70,\n            origin: {y: 0.6},\n        });\n    }\n\n    const onMint = async () => {\n        try {\n            setIsMinting(true);\n            if (wallet && candyMachine?.program && wallet.publicKey) {\n                const mint = anchor.web3.Keypair.generate();\n                const mintTxId = (\n                    await mintOneToken(candyMachine, wallet.publicKey, mint)\n                )[0];\n\n                let status: any = {err: true};\n                if (mintTxId) {\n                    status = await awaitTransactionSignatureConfirmation(\n                        mintTxId,\n                        props.txTimeout,\n                        props.connection,\n                        'singleGossip',\n                        true,\n                    );\n                }\n\n                if (!status?.err) {\n                    setAlertState({\n                        open: true,\n                        message: 'Congratulations! Mint succeeded!',\n                        severity: 'success',\n                    });\n\n                    // update front-end amounts\n                    displaySuccess(mint.publicKey);\n                } else {\n                    setAlertState({\n                        open: true,\n                        message: 'Mint failed! Please try again!',\n                        severity: 'error',\n                    });\n                }\n            }\n        } catch (error: any) {\n            // TODO: blech:\n            let message = error.msg || 'Minting failed! Please try again!';\n            if (!error.msg) {\n                if (!error.message) {\n                    message = 'Transaction Timeout! Please try again.';\n                } else if (error.message.indexOf('0x138')) {\n                } else if (error.message.indexOf('0x137')) {\n                    message = `SOLD OUT!`;\n                } else if (error.message.indexOf('0x135')) {\n                    message = `Insufficient funds to mint. Please fund your wallet.`;\n                }\n            } else {\n                if (error.code === 311) {\n                    message = `SOLD OUT!`;\n                } else if (error.code === 312) {\n                    message = `Minting period hasn't started yet.`;\n                }\n            }\n\n            setAlertState({\n                open: true,\n                message,\n                severity: \"error\",\n            });\n        } finally {\n            setIsMinting(false);\n        }\n    };\n\n\n    useEffect(() => {\n        (async () => {\n            if (wallet) {\n                const balance = await props.connection.getBalance(wallet.publicKey);\n                setBalance(balance / LAMPORTS_PER_SOL);\n            }\n        })();\n    }, [wallet, props.connection]);\n\n    useEffect(refreshCandyMachineState, [\n        wallet,\n        props.candyMachineId,\n        props.connection,\n        isEnded,\n        isPresale\n    ]);\n\n    return (\n        <main>\n            <MainContainer>\n                <WalletContainer>\n                    <Logo><a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"logo\"\n                                                                                                          src=\"logo.png\"/></a></Logo>\n                    <Menu>\n                    <li><a href=\"http://twitter.com/prashantikv\" target=\"_blank\" rel=\"noopener noreferrer\"><img alt=\"twitterlogo\" src=\"Udemy_logo.png\"/>\n                        </a>\n                        </li>\n                        <li>\n                            <a href=\"http://twitter.com/prashantikv\" target=\"_blank\" rel=\"noopener noreferrer\">Home\n                        </a>\n                        </li>\n                       \n                    </Menu>\n                    <Wallet>\n                        {wallet ?\n                            <WalletAmount>{(balance || 0).toLocaleString()} SOL<ConnectButton/></WalletAmount> :\n                            <ConnectButton>Connect Wallet</ConnectButton>}\n                    </Wallet>\n                </WalletContainer>\n                <ShimmerTitle>MINT IS LIVE !</ShimmerTitle>\n                <br/>\n                <MintContainer>\n                    <DesContainer>\n                        <NFT elevation={3}>\n                            <h2>LEGION PUPS</h2>\n                            <br/>\n                            <div><Price\n                                label={isActive && whitelistEnabled && (whitelistTokenBalance > 0) ? (whitelistPrice + \" \" + priceLabel) : (price + \" \" + priceLabel)}/><Image\n                                src=\"cartoon.gif\"\n                                alt=\"NFT To Mint\"/></div>\n                            <br/>\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && isBurnToken &&\n                              <h3>You own {whitelistTokenBalance} WL mint {whitelistTokenBalance > 1 ? \"tokens\" : \"token\" }.</h3>}\n                            {wallet && isActive && whitelistEnabled && (whitelistTokenBalance > 0) && !isBurnToken &&\n                              <h3>You are whitelisted and allowed to mint.</h3>}\n\n                            {wallet && isActive && endDate && Date.now() < endDate.getTime() &&\n                              <Countdown\n                                date={toDate(candyMachine?.state?.endSettings?.number)}\n                                onMount={({completed}) => completed && setIsEnded(true)}\n                                onComplete={() => {\n                                    setIsEnded(true);\n                                }}\n                                renderer={renderEndDateCounter}\n                              />}\n                            {wallet && isActive &&\n                              <h3>TOTAL MINTED : {itemsRedeemed} / {itemsAvailable}</h3>}\n                            {wallet && isActive && <BorderLinearProgress variant=\"determinate\"\n                                                                         value={100 - (itemsRemaining * 100 / itemsAvailable)}/>}\n                            <br/>\n                            <MintButtonContainer>\n                                {!isActive && !isEnded && candyMachine?.state.goLiveDate && (!isWLOnly || whitelistTokenBalance > 0) ? (\n                                    <Countdown\n                                        date={toDate(candyMachine?.state.goLiveDate)}\n                                        onMount={({completed}) => completed && setIsActive(!isEnded)}\n                                        onComplete={() => {\n                                            setIsActive(!isEnded);\n                                        }}\n                                        renderer={renderGoLiveDateCounter}\n                                    />) : (\n                                    !wallet ? (\n                                            <ConnectButton>Connect Wallet</ConnectButton>\n                                        ) : (!isWLOnly || whitelistTokenBalance > 0) ?\n                                        candyMachine?.state.gatekeeper &&\n                                        wallet.publicKey &&\n                                        wallet.signTransaction ? (\n                                            <GatewayProvider\n                                                wallet={{\n                                                    publicKey:\n                                                        wallet.publicKey ||\n                                                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                                                    //@ts-ignore\n                                                    signTransaction: wallet.signTransaction,\n                                                }}\n                                                // // Replace with following when added\n                                                // gatekeeperNetwork={candyMachine.state.gatekeeper_network}\n                                                gatekeeperNetwork={\n                                                    candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                                                } // This is the ignite (captcha) network\n                                                /// Don't need this for mainnet\n                                                clusterUrl={rpcUrl}\n                                                options={{autoShowModal: false}}\n                                            >\n                                                <MintButton\n                                                    candyMachine={candyMachine}\n                                                    isMinting={isMinting}\n                                                    isActive={isActive}\n                                                    isEnded={isEnded}\n                                                    isSoldOut={isSoldOut}\n                                                    onMint={onMint}\n                                                />\n                                            </GatewayProvider>\n                                        ) : (\n                                            <MintButton\n                                                candyMachine={candyMachine}\n                                                isMinting={isMinting}\n                                                isActive={isActive}\n                                                isEnded={isEnded}\n                                                isSoldOut={isSoldOut}\n                                                onMint={onMint}\n                                            />\n                                        ) :\n                                        <h1>Mint is private.</h1>\n                                        )}\n                            </MintButtonContainer>\n                            <br/>\n                            {wallet && isActive && solanaExplorerLink &&\n                              <SolExplorerLink href={solanaExplorerLink} target=\"_blank\">View on Solscan</SolExplorerLink>}\n                        </NFT>\n                    </DesContainer>\n                    <DesContainer>\n                        <Des elevation={2}>\n                            <LogoAligner><img src=\"logo.png\" alt=\"\"></img><GoldTitle>LEGION PUPS</GoldTitle></LogoAligner>\n                            <p>2222 unique super hero pups characters</p>\n                            <p>Each legion pup belongs to a sub-legion of a super hero and is here to support the super heroes on the Solana blockchain, while they are away on another metaverse.</p>\n                        </Des>\n                    </DesContainer>\n                </MintContainer>\n            </MainContainer>\n            <Snackbar\n                open={alertState.open}\n                autoHideDuration={6000}\n                onClose={() => setAlertState({...alertState, open: false})}\n            >\n                <Alert\n                    onClose={() => setAlertState({...alertState, open: false})}\n                    severity={alertState.severity}\n                >\n                    {alertState.message}\n                </Alert>\n            </Snackbar>\n        </main>\n    );\n};\n\nexport default Home;\n","import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={txTimeout}\n                rpcHost={rpcHost}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nimport { SystemProgram } from '@solana/web3.js';\nimport { sendTransactions } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\ninterface CandyMachineState {\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = 'recent',\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachine> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'recent',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive:\n        state.data.goLiveDate &&\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\n        (state.endSettings\n          ? state.endSettings.endSettingType.date\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\n            : itemsRedeemed < state.endSettings.number.toNumber()\n          : true),\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const mintOneToken = async (\n    candyMachine: CandyMachine,\n    payer: anchor.web3.PublicKey,\n    mint: anchor.web3.Keypair\n): Promise<(string | undefined)[]> => {\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const signers: anchor.web3.Keypair[] = [mint];\n  const cleanupInstructions = [];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  try {\n    return (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions, cleanupInstructions],\n        [signers, []],\n      )\n    ).txs.map(t => t.txid);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return [];\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}"],"sourceRoot":""}